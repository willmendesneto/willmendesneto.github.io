{"componentChunkName":"component---src-templates-post-js","path":"/blog/unit-test-in-johnny-five-nodebot-apps","result":{"data":{"markdownRemark":{"html":"<p>This time something simple, but without good information about it is how to add unit tests in Nodebots apps.</p>\n<blockquote>\n<p>Unit test? But this is not a new thing</p>\n</blockquote>\n<p>Yes, you’re right, but you can find few contents about this topic in Arduino, robots and open hardware apps.</p>\n<p>But relax … this is not a big deal ;)</p>\n<h3>Unit tests</h3>\n<p>Unit test is only one way to test your software. Based in the <a href=\"http://martinfowler.com/bliki/TestPyramid.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">test pyramid</a> this is the way that you can organize the tests your application.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*3njsTEPjz8qom_kl.png\">\nundefined</p>\n<blockquote>\n<p><em>In this post we will talk only of unit tests, if you like to know more about all the layers, please read</em> <a href=\"http://martinfowler.com/bliki/TestPyramid.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>“TestPyramid” post of Martin Fowler</em></a></p>\n</blockquote>\n<p>The idea of the unit test is validate your code, make sure that your code is doing what it suppose to do and give you feedback about the errors fast (before your deploy pipeline steps) when the assertion fails.</p>\n<p>The validation of this concept was in the <a href=\"https://github.com/willmendesneto/build-checker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Build Checker repository</a> and was really easy.</p>\n<blockquote>\n<p><em>If you like to know more about the project, please read</em> <a href=\"http://willmendesneto.github.io/2016/05/15/checking-your-build-in-snap-ci-via-nodebots-using-nodejs-and-arduino\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>“Checking your build in SNAP-CI via nodebots using NodeJS and Arduino”</em></a></p>\n</blockquote>\n<h3>What about nodebots?</h3>\n<p>One aspect that nobody explain very well is about the tests in nodebots. The main goal in this case is create the electric mocks and stubs and simulate the communication between components.</p>\n<p>One useful package is <a href=\"https://github.com/rwaldron/mock-firmata\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mock-firmata</a>, created by Rick Waldron to make the tests in <a href=\"http://johnny-five.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Johnny-Five</a> easier. The integration is really simple, you just need to load and create your board component in the test.</p>\n<p>require('should');\nvar mockFirmata = require('mock-firmata');\nvar five = require('johnny-five');\nvar Board = five.Board;\nvar Accelerometer = five.Accelerometer;</p>\n<p>var board = new Board({\nio: new mockFirmata.Firmata(),\ndebug: false,\nrepl: false\n});</p>\n<p>After the integration, the unit tests is using mocha test framework (but you can use others, if you like), <a href=\"http://sinonjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sinon js</a> in test spies, stubs and mocks and <a href=\"https://shouldjs.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">should js</a> for the assertions.</p>\n<p>One simple way to validation is when the build checker should blink the led. Basically you have to create a stub for the request (in this case using <a href=\"https://github.com/request/request\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">request package</a>) for validate the response by expected types (success and error) and spy the led components.</p>\n<p>After this is create the scenario for validate this case. Nothing really hard, right? Some things that you need to remember about the test is that your beforeEach method should be a documentation about the steps to reproduce your scenario.</p>\n<p>require('should');\nconst request = require('request');\nconst sinon = require('sinon');</p>\n<p>...\ndescribe('When the CI server send success response', () => {\nbeforeEach(() => {\nsuccessResponseCI = `your awesome response`;</p>\n<p>this.clock = sinon.useFakeTimers();\nsinon.stub(request, 'get').yields(null, null, successResponseCI);\nsinon.spy(buildChecker.ledSuccess, 'on');\nsinon.spy(buildChecker.ledError, 'off');</p>\n<p>buildChecker.startPolling();\nthis.clock.tick(CONFIG.INTERVAL);\n});</p>\n<p>afterEach(() => {\nrequest.get.restore();\nthis.clock.restore();\n});</p>\n<p>it('should turn on the success led', () => {\nbuildChecker.ledSuccess.on.calledOnce.should.be.true;\n});</p>\n<p>it('should turn off the error led', () => {\nbuildChecker.ledError.off.calledOnce.should.be.true;\n});</p>\n<p>});\n...</p>\n<p>After this you can add more tests and create your pipeline correctly, so you are sure that your code is covered. The final result is :</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/0*Guw1r56Nwz6N0E0n.png\">\nundefined</p>\n<p>*** This don’t remove other validations, as validation with software, but it’s another way to validate first the new features, updates, etc.</p>\n<blockquote>\n<p>If you like to know more about Nodebots, please check my book <a href=\"https://leanpub.com/nodebots-javascript-and-robotic-in-the-real-world\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">“Nodebots — Javascript and robotic in the real world”</a></p>\n</blockquote>\n<hr/>\n<h3>Conclusion</h3>\n<p>As you can see the integration with unit tests is really easy and you can make sure that at least these cases are covered in your app. In this repository is integrated code coverage badge, code lint and more.</p>\n<p>How about you? How you are using node js and unit tests? Are you testing your node js embedded applications? Share your experience!</p>\n<p>Thank you and see you soon!</p>\n<p>Links:</p>\n<p>- Johnny-Five: <a href=\"http://johnny-five.io\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://johnny-five.io</a>\n- Test pyramid: <a href=\"http://martinfowler.com/bliki/TestPyramid.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://martinfowler.com/bliki/TestPyramid.html</a>\n- Mock Firmata: <a href=\"https://github.com/rwaldron/mock-firmata\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/rwaldron/mock-firmata</a>\n- Build Checker: <a href=\"https://github.com/willmendesneto/build-checker\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/willmendesneto/build-checker</a>\n- Sinon JS: <a href=\"http://sinonjs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://sinonjs.org/</a>\n- Should JS: <a href=\"https://shouldjs.github.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://shouldjs.github.io/</a>\n- Mocha JS: <a href=\"https://mochajs.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://mochajs.org/</a></p>\n<p><em>Originally published at</em> <a href=\"http://willmendesneto.github.io/2016/06/27/unit-test-in-johnny-five-nodebot-apps\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><em>willmendesneto.github.io</em></a> <em>on June 27, 2016.</em></p>","frontmatter":{"date":"June 27, 2016","path":"/blog/unit-test-in-johnny-five-nodebot-apps","title":"Unit test in Johnny-Five nodebot apps"},"timeToRead":4}},"pageContext":{}},"staticQueryHashes":["63159454"]}