{"componentChunkName":"component---src-templates-post-js","path":"/posts/using-typescript-in-a-nodejs-module/","result":{"data":{"markdownRemark":{"html":"<p><img src=\"https://cdn-images-1.medium.com/max/2560/1*SSo_VpLEJ49WTi_ubpTVGQ.png\" alt=\"\"></p>\n<p>… or Typescript + NodeJS = ❤</p>\n<p>TypeScript is a really mature project built by Microsoft and supported by communities around the world, with the main goal to bring types to JavaScript, being <a href=\"https://blogs.msdn.microsoft.com/typescript/2014/10/22/typescript-and-the-road-to-2-0/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">a superset of standard JavaScript</a>. Since we have several cases sharing the benefits of types usage in Javascript, such as <a href=\"https://redditblog.com/2017/06/30/why-we-chose-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Reddit</a>, <a href=\"https://blog.asana.com/2014/11/asana-switching-typescript/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Asana</a> and <a href=\"https://github.com/NativeScript/NativeScript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NativeScript</a> and there are lots of available Typescript tooling in a well covered state with a quick integration.</p>\n<p>After felt the taste of Typescript with Angular and like it, I give it a try on a NodeJS module called <a href=\"https://github.com/willmendesneto/feature-toggle-service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">feature-toggle-service</a> which I started in Javascript and now using Typescript.</p>\n<p>Since I’m using <a href=\"https://martinfowler.com/articles/feature-toggles.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">feature toggle technique</a>s (which I strongly recommend you if you’re not familiar with the concept) in some projects to allow teams to modify system behaviours without code changes, I built small components in some frameworks and libraries such as Angular and React.</p>\n<p>Then <a href=\"https://github.com/willmendesneto/feature-toggle-service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">feature-toggle-service</a> was built based on the component boundaries, one of the most useful NodeJS and software best practices. The main goal is simple: decoupling the logic into a small package and make the idea around feature toggle configuration and validation easier and have integration options for pure Javascript, frameworks and/or libraries.</p>\n<p>As a example of this approach you can take a look into <a href=\"https://github.com/willmendesneto/ngx-feature-toggle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Angular</a> and <a href=\"https://github.com/willmendesneto/reactor-feature-toggle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">React</a> component components for Feature toggles/flags.</p>\n<blockquote>\n<p>If you want to know more about best practices designing NodeJS systems, take a look in this thread on Quora.</p>\n</blockquote>\n<p><a href=\"https://www.quora.com/What-are-some-of-the-best-architecture-practices-when-designing-a-Node-js-system-How-modular-should-I-make-my-design-Should-different-parts-of-the-website-be-served-by-different-nodes-How-do-I-design-to-make-use-of-a-multi-core\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>What are some best architecture practices when designing a nodejs system?</strong></a></p>\n<h3>Setup</h3>\n<p>The bootstrap of a project with Typescript is something really quick. First of all you need to install some NodeJS packages for support, execution environment and type definition management via command</p>\n<p><code class=\"language-text\">yarn install -D ts-node typescript typings</code></p>\n<p>These packages are:</p>\n<ul>\n<li>ts-node: TypeScript execution environment;</li>\n<li>typescript: Support for Typescript in NodeJS;</li>\n<li>typings: TypeScript Definition Manager;</li>\n</ul>\n<p>To do this we will use the <code class=\"language-text\">tsc</code> and <code class=\"language-text\">typings</code> command line executables inside our node_modules folder. These were installed via Typescript and Typings respectively. So that, we will create the <code class=\"language-text\">tsconfig.json</code> file using the command <code class=\"language-text\">./node_modules/.bin/tsc --init</code> with all information related to your application.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compilerOptions\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"target\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ES5\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"module\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"commonjs\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"declaration\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"outDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"lib\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"rootDir\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"src\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"removeComments\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"strict\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>That’s the default configuration for the published package. With that the first step is migrate all the files from <code class=\"language-text\">.js</code> to <code class=\"language-text\">.ts</code>, adding types when is required. Typescript is really smart, so in some functions, classes and methods you can suppress type syntax, because it's something already implicit via code.</p>\n<p>As a example, this snippet with the function <code class=\"language-text\">isOn</code> is return a <code class=\"language-text\">boolean</code> by default since the operator <code class=\"language-text\">!!</code> transforms the response in a boolean by default. This logic can be applied for methods <code class=\"language-text\">void</code> and other methods as well.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> settings<span class=\"token operator\">:</span> <span class=\"token builtin\">any</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isOn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token operator\">!</span>settings<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Unit tests</h3>\n<p>NPM scripts is a flexible approach, enabling access from local and global Node packages. This is one of the reasons to add all the tasks of the project inside <code class=\"language-text\">package.json</code> in the current repository.</p>\n<p>Unit tests is something <strong><em>crucial</em></strong> if you're thinking in best practices to evolve your package and add it as a open source project and that was the first step in after change files from <code class=\"language-text\">.js</code> to <code class=\"language-text\">.ts</code>. So before the tests we have a lint task and when the test suit is running the coverage is collected</p>\n<p>The tests have a small requirement to build the <code class=\"language-text\">.ts</code> files and after that call use the bundle files in your test suit.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"compile\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tsc\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"npm run compile &amp;&amp; npm run code-coverage\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"code-coverage\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"NODE_ENV=test nyc — reporter=lcov — reporter=text-summary mocha ./test/*.spec.js — require ./test/setup.js\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"pretest\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"tslint src\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>So that when <code class=\"language-text\">yarn test</code> is running all the lint and code coverage is triggered by default.</p>\n<h3>Publishing</h3>\n<p>Publish a package is a common task in every single package release and a good tool for help on package publish automation is <a href=\"https://www.npmjs.com/package/semantic-release\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">semantic-version</a>, which can runs in your continuous integration/continuous delivery. It's not a Typescript tooling, but it's heavily used in OSS — <em>Open source projects</em>.</p>\n<p>If you want to know how to integrate this package into your repository and understand all required steps, please watch the Egghead's video <a href=\"https://egghead.io/lessons/javascript-automating-releases-with-semantic-release\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">\"<strong>How to Write a JavaScript Library — Automating Releases with semantic-release</strong>\"</a>.</p>\n<p>Another approach that can be combined is the <a href=\"https://www.thoughtworks.com/radar/techniques/canary-builds\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Canary build</a>, which can be added in your repository using <a href=\"https://greenkeeper.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Greenkeeper</a>, sending pull requests in real time with all bumps and updates for NPM dependencies.</p>\n<p><img src=\"https://cdn-images-1.medium.com/max/800/1*EMlbRkbWCk6EFRP0eQokMQ.png\" alt=\"\"></p>\n<blockquote>\n<p>Please read the post by Kent C Dodds sharing some good points about open source and how to contribute.</p>\n</blockquote>\n<p><a href=\"https://kentcdodds.com/blog/introducing-how-to-contribute-to-open-source\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>Introducing: How to Contribute to Open Source</strong>\n</a></p>\n<hr/>\n<h3>Conclusion</h3>\n<p>I hope you enjoyed this post and try to use Typescript in your projects, sharing your experience as well. The good outcome is this migration is something transparent for the package consumers and it will help in next features, refactors and other improvements.</p>\n<p>IF you are interested in see the final solution, please take a look in the <a href=\"https://github.com/willmendesneto/feature-toggle-service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Github repository</a>. In the next post I will share the benefits of code decouple and how it will help in aspects such as reuse and flexibility. That's all folks!</p>\n<h3>Links</h3>\n<ul>\n<li>Martin Fowler: post about feature toggles <a href=\"https://martinfowler.com/articles/feature-toggles.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://martinfowler.com/articles/feature-toggles.html</a></li>\n<li>Feature toggle service: <a href=\"https://github.com/willmendesneto/feature-toggle-service\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/willmendesneto/feature-toggle-service</a></li>\n<li>NGX Feature toggle: Angular component for feature toggles <a href=\"https://github.com/willmendesneto/ngx-feature-toggle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/willmendesneto/ngx-feature-toggle</a></li>\n<li>Reactor Feature toggle: React component for feature toggles <a href=\"https://github.com/willmendesneto/reactor-feature-toggle\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/willmendesneto/reactor-feature-toggle</a></li>\n<li>Introducing: How to Contribute to Open Source: <a href=\"https://medium.com/@kentcdodds/introducing-how-to-contribute-to-open-source-be67917eb704\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://medium.com/@kentcdodds/introducing-how-to-contribute-to-open-source-be67917eb704</a></li>\n</ul>","frontmatter":{"date":"July 30, 2017","path":"/posts/using-typescript-in-a-nodejs-module","title":"Using Typescript in a NodeJS module","tags":["javascript","typescript","nodejs","tooling"],"status":"active"},"timeToRead":4}},"pageContext":{"postPath":"/posts/using-typescript-in-a-nodejs-module"}},"staticQueryHashes":["1271460761","63159454"],"slicesMap":{}}