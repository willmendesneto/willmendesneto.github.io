{"componentChunkName":"component---src-templates-post-js","path":"/posts/another-way-to-think-in-unit-tests-for-components/","result":{"data":{"markdownRemark":{"html":"<p>This time I'll share a quick code tip. Usually, when writing unit tests on components there's a common usage/pitfal. Some teams can start describing only and exclusively what the code does instead of the intentions around the code exists.</p>\n<blockquote>\n<p>‚ö†Ô∏è This post will talk only and exclusively about the way of writing tests that makes sense to humans, so we it won't cover Test Driven Development - AKA TDD. TDD is not just a design tool, but also a software development workflow that has prompts for code improvement in its lifecycle. ‚ö†Ô∏è</p>\n</blockquote>\n<hr/>\n<h2>The problem</h2>\n<p>If you're looking at unit tests content on the web, eventually you might find some posts, articles and such mentioning phrases like \"tests are a way of documenting your code\". But, are they really?</p>\n<p>They should, of course! However, I rarely heard about some deep and technical discussions around standards, clarifications or any matter to read the tests and understand what's happening in there.</p>\n<h2>Writing unit tests that are real and live documentation of your code</h2>\n<p>This time I'll share a quick code tip. Usually, when writing unit tests on components there's a common usage/pitfal. Some teams can start describing only and exclusively what the code does instead of the intentions around the code exists.</p>\n<p>For this example, we'll play with some test cases for a component called \"Quick Search\", a fancy name for another search component üòú</p>\n<h3>Less focus on component internals</h3>\n<p>Nobody cares if your callback has been called, but everybody cares about component behaviors working as expected</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">With registered links\n  #hasAny\n    ‚úÖ is true\n  #all\n    ‚úÖ is a list of all registered links\nWithout registered links\n  #hasAny\n    ‚úÖ is false\n  #all\n    ‚úÖ is an empty array\n</code></pre></div>\n<h3>Main focus on what, how and why the feature exists</h3>\n<p>Instead of focusing on the nitty-gritty details of how a component or hook works internally, shift your focus to testing its observable behavior and the user's interaction with it. Think about what the component <em>does</em> and <em>why</em> it does it, rather than how specific functions are called or state variables are mutated.</p>\n<p>Consider a scenario where you have a custom hook, <code class=\"language-text\">useRegisteredLinks()</code>, that checks if a given list of URLs are registered within your application. A less effective way to test this might involve checking if a specific internal filtering method was called. A more behavior-driven approach would be to test the hook's output based on different inputs:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">`useRegisteredLinks()`\n    ‚úÖ should display registered search results if any are found\n    ‚úÖ should display a \"No relevant results found\" message if no registered links are present\n    ‚úÖ should handle an empty searchResults array correctly</code></pre></div>\n<p>Notice how these test descriptions clearly articulate the expected <em>behavior</em> of the <code class=\"language-text\">useRegisteredLinks()</code> hook under various conditions. They don't delve into the internal implementation details of how the hook determines if a link is registered. This makes the tests more resilient to code changes; if the internal implementation is refactored but the behavior remains the same, the tests will still pass.</p>\n<p><strong>The Key: Focus on Behavior, Not Implementation</strong></p>\n<p>Your test descriptions and assertions should primarily revolve around the observable behavior of the unit you're testing. For a component, this means testing how it renders under different props, how it responds to user interactions (like clicks or input changes), and what side effects it might trigger. For a hook, focus on the values it returns and any side effects it initiates based on its inputs. For utilities or helpers, concentrate on the output they produce for given inputs.</p>\n<p><strong>When Internal Details Matter (Rarely)</strong></p>\n<p>There might be rare cases where testing internal methods or state becomes necessary. This usually happens when the internal logic is complex and has observable side effects that are crucial to the unit's functionality. However, strive to minimize these cases as they can make your tests brittle and harder to maintain. If you find yourself frequently testing internals, it might be a sign that your unit is doing too much and could benefit from being broken down into smaller, more focused units.</p>\n<hr />\n<h3>Example: Quick Search Component with <code class=\"language-text\">useRegisteredLinks()</code></h3>\n<p>Let's illustrate this with a <code class=\"language-text\">QuickSearch</code> React component that utilizes our <code class=\"language-text\">useRegisteredLinks()</code> hook. Assume this component takes a list of potential search result URLs and displays only the ones that are registered within the application.</p>\n<p>First, let's define a simplified version of the <code class=\"language-text\">useRegisteredLinks()</code> hook:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// hooks/useRegisteredLinks.ts</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useState<span class=\"token punctuation\">,</span> useEffect <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> registeredUrls <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/products/1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/blog/latest'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/about'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">UseRegisteredLinksResult</span> <span class=\"token punctuation\">{</span>\n  hasRegistered<span class=\"token operator\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n  registeredLinks<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> useRegisteredLinks <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>links<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> UseRegisteredLinksResult <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>hasRegistered<span class=\"token punctuation\">,</span> setHasRegistered<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useState</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>registeredLinks<span class=\"token punctuation\">,</span> setRegisteredLinks<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">useState</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> validLinks <span class=\"token operator\">=</span> links<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>link <span class=\"token operator\">=></span> registeredUrls<span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>link<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setRegisteredLinks</span><span class=\"token punctuation\">(</span>validLinks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">setHasRegistered</span><span class=\"token punctuation\">(</span>validLinks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>links<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> hasRegistered<span class=\"token punctuation\">,</span> registeredLinks <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> useRegisteredLinks<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now, let's create the <code class=\"language-text\">QuickSearch</code> component:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// components/QuickSearch.tsx</span>\n<span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useRegisteredLinks <span class=\"token keyword\">from</span> <span class=\"token string\">'@/hooks/useRegisteredLinks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">QuickSearchProps</span> <span class=\"token punctuation\">{</span>\n  searchResults<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">QuickSearch</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> searchResults <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> QuickSearchProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> registeredLinks <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">useRegisteredLinks</span><span class=\"token punctuation\">(</span>searchResults<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Quick Search Results</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>registeredLinks<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>\n          registeredLinks<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>link <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>link<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">No relevant results found.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>And here's how we might write unit tests for the <code class=\"language-text\">QuickSearch</code> component, focusing on its behavior:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> QuickSearch<span class=\"token punctuation\">,</span> QuickSearchProps <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@/components/QuickSearch'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> useRegisteredLinks <span class=\"token keyword\">from</span> <span class=\"token string\">'@/hooks/useRegisteredLinks'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mock the useRegisteredLinks hook to control its behavior in tests</span>\nvi<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/hooks/useRegisteredLinks'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> mockedUseRegisteredLinks <span class=\"token operator\">=</span> useRegisteredLinks <span class=\"token keyword\">as</span> vi<span class=\"token punctuation\">.</span>Mock<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">SetupProps</span> <span class=\"token punctuation\">{</span>\n  searchResults<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  quickSearchProps<span class=\"token operator\">?</span><span class=\"token operator\">:</span> QuickSearchProps<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">setup</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  searchResults <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  quickSearchProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    hasRegistered<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    registeredLinks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SetupProps<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  mockedUseRegisteredLinks<span class=\"token punctuation\">.</span><span class=\"token function\">mockReturnValue</span><span class=\"token punctuation\">(</span>quickSearchProps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> view <span class=\"token operator\">=</span> <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">QuickSearch</span></span> <span class=\"token attr-name\">searchResults</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>searchResults<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;QuickSearch />'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should display registered search results if any are found'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      searchResults<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/products/1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/random'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/blog/latest'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      quickSearchProps<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        hasRegistered<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        registeredLinks<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/products/1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/blog/latest'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quick Search Results'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'/products/1'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'/blog/latest'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'/random'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No relevant results found.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should display \"No relevant results found\" message if no registered links are present'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      searchResults<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'/random1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/another'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quick Search Results'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No relevant results found.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should handle an empty searchResults array correctly'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Quick Search Results'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'No relevant results found.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>screen<span class=\"token punctuation\">.</span><span class=\"token function\">queryByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'link'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toBeInTheDocument</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There are some cristal clear benefits of this approach. By writing tests focusing on the behavior instead of its internals, the tests shouldn't be affected in case of internal changes such as refactors, for example.</p>\n<p>Also, the tests can be a clear documentation of what the component should do. In fact, it makes things even clear for maintenance and application evolution purposes. And this is massive!</p>\n<hr />\n<!--  -->\n<h2>Thinking Beyond Isolation: User Journey Tests for Page Components</h2>\n<p>While traditional unit tests excel at verifying individual units in isolation, another valuable approach for testing React page components is to simulate user interactions. Using your unit testing infrastructure (like Vitest and React Testing Library), you can write tests that mimic how a user might interact with a specific page or a significant section of it.</p>\n<p><strong>Key Principles:</strong></p>\n<ol>\n<li><strong>Focus on User Interactions and Outcomes:</strong> The tests should revolve around common user workflows on the page. What does a user do? What should happen as a result?</li>\n<li><strong>Simulate User Actions:</strong> Utilize React Testing Library's <code class=\"language-text\">userEvent</code> API to simulate more realistic user interactions such as typing, clicking, focusing, and changing input values. <code class=\"language-text\">userEvent</code> handles details like focus changes and input dispatch more accurately than <code class=\"language-text\">fireEvent</code>.</li>\n<li><strong>Assert on Observable Outcomes:</strong> Verify the changes in the rendered output that a user would perceive. This includes the presence/absence of elements, text changes, attribute changes, and (to a limited extent) the triggering of mocked callbacks.</li>\n<li><strong>Component-Centric Scope:</strong> These tests focus on the page component and its direct children. External dependencies like API calls or higher-level state management are typically mocked.</li>\n<li><strong>Unit Test Infrastructure (Vitest) and User Interaction (<code class=\"language-text\">userEvent</code>):</strong> You're still using your fast and isolated unit testing framework, Vitest, along with the more user-centric interaction simulation provided by <code class=\"language-text\">userEvent</code> from React Testing Library.</li>\n</ol>\n<p>Let's revisit the feedback form example, now with Vitest and <code class=\"language-text\">userEvent</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> render<span class=\"token punctuation\">,</span> screen<span class=\"token punctuation\">,</span> waitFor <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> describe<span class=\"token punctuation\">,</span> it<span class=\"token punctuation\">,</span> expect<span class=\"token punctuation\">,</span> vi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vitest'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Import Vitest-specific functions</span>\n<span class=\"token keyword\">import</span> userEvent <span class=\"token keyword\">from</span> <span class=\"token string\">'@testing-library/user-event'</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Import userEvent</span>\n<span class=\"token keyword\">import</span> FeedbackFormPage <span class=\"token keyword\">from</span> <span class=\"token string\">'@/pages/FeedbackFormPage'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Mock the feedback submission function</span>\n<span class=\"token keyword\">const</span> mockSubmitFeedback <span class=\"token operator\">=</span> vi<span class=\"token punctuation\">.</span><span class=\"token function\">fn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvi<span class=\"token punctuation\">.</span><span class=\"token function\">mock</span><span class=\"token punctuation\">(</span><span class=\"token string\">'@/api/feedback'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  submitFeedback<span class=\"token operator\">:</span> mockSubmitFeedback<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&lt;FeedbackFormPage /> - User Journey'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should allow a user to submit feedback and display a success message'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FeedbackFormPage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Setup user event</span>\n\n    <span class=\"token comment\">// 1. User types feedback into the input field</span>\n    <span class=\"token keyword\">const</span> feedbackInput <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByLabelText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Your Feedback'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">type</span><span class=\"token punctuation\">(</span>feedbackInput<span class=\"token punctuation\">,</span> <span class=\"token string\">'This is great!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 2. User clicks the submit button</span>\n    <span class=\"token keyword\">const</span> submitButton <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Submit Feedback'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>submitButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 3. Assert that the submission function was called</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockSubmitFeedback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalledWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'This is great!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 4. Assert that the success message is displayed</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByText</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Thank you for your feedback!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'should prevent submission if the feedback input is empty'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">FeedbackFormPage</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> userEvent<span class=\"token punctuation\">.</span><span class=\"token function\">setup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Setup user event</span>\n\n    <span class=\"token keyword\">const</span> submitButton <span class=\"token operator\">=</span> screen<span class=\"token punctuation\">.</span><span class=\"token function\">getByRole</span><span class=\"token punctuation\">(</span><span class=\"token string\">'button'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> <span class=\"token string\">'Submit Feedback'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">await</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span>submitButton<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Assert that the submission function was NOT called</span>\n    <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>mockSubmitFeedback<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not<span class=\"token punctuation\">.</span><span class=\"token function\">toHaveBeenCalled</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Assert that an error message (if any) is displayed (optional)</span>\n    <span class=\"token comment\">// expect(screen.getByText('Please enter your feedback.')).toBeInTheDocument();</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Key Changes for Vitest and userEvent:</p>\n<p>Import userEvent: We now import userEvent from @testing-library/user-event.\nuserEvent.setup(): Inside each test that involves user interaction, we call userEvent.setup() to get a user object. This provides the API for simulating interactions.\nUsing user.type() and user.click(): Instead of fireEvent.change and fireEvent.click, we now use the asynchronous methods user.type() and user.click() from the user object. These methods more closely simulate actual browser events.\nBenefits of User Journey Tests (Within Unit Infra with Vitest and userEvent for Page Components):</p>\n<p>More Realistic Interactions: userEvent simulates user behavior more accurately, leading to tests that better reflect real-world usage.\nHigher-Level Confidence: Provides even greater assurance that the page component functions correctly from a user's perspective due to more accurate interaction simulation.\nBetter Documentation: Test names and structure continue to resemble user stories.\nReduced Risk of Interaction Issues (Within the Component): Helps catch subtle issues related to focus, input dispatch, and other browser behaviors.\nFast Feedback Loop: Vitest's speed ensures these tests run quickly.\nLimitations:</p>\n<p>Still Isolated: Doesn't test real integrations with backend, routing, or global state. Integration/E2E tests are needed for that.\nReliance on Mocking: Heavily depends on accurate mocking of dependencies.\nPotential Overlap: Can overlap with traditional unit tests; balance is key.\nIn conclusion, user journey tests for React page components using Vitest and userEvent offer an even more refined way to test the integrated behavior of a page from a user-centric standpoint, leveraging a fast unit testing framework and accurate user interaction simulation. They are a valuable complement to traditional unit tests.</p>\n<!--  -->\n<h3>That‚Äôs all for¬†now</h3>\n<p>This was a quick one, but I hope you enjoyed this reading as much as I enjoyed writing it. Thank you so much for reading until the end and see you soon!</p>\n<hr />\n<h3>Cya üëã</h3>","frontmatter":{"date":"April 28, 2025","path":"/posts/another-way-to-think-in-unit-tests-for-components/","title":"Another way of thinking about frontend tests - Unit tests","tags":["frontend","javascript","nodejs","tips","architecture","tests","unit"],"status":"active"},"timeToRead":8}},"pageContext":{"postPath":"/posts/another-way-to-think-in-unit-tests-for-components/"}},"staticQueryHashes":["1271460761","63159454"],"slicesMap":{}}