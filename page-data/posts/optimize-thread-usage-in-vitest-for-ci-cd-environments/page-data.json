{"componentChunkName":"component---src-templates-post-js","path":"/posts/optimize-thread-usage-in-vitest-for-ci-cd-environments","result":{"data":{"markdownRemark":{"html":"<h3>Introduction</h3>\n<p>When working with tests in a CI/CD environment, itâ€™s common to face challenges related to performance and efficient resource usage. A recurring issue involves Vitestâ€™s default configuration for the number of threads, which can cause memory problems, especially in virtualized or shared environments like Kubernetes runners. As a result of that, your test suite might be ending up failing intermentently.</p>\n<p>In this article, weâ€™ll explore a practical solution to this problem using Vitestâ€™s <code class=\"language-text\">poolOptions</code> configuration, ensuring efficient and adaptable test execution regardless of the environment.</p>\n<hr>\n<h2>The Problem with Default Thread Configuration</h2>\n<p>Vitest uses threads to parallelize test execution, with its default configuration based on the number of CPU cores available. While this works well in local environments, detecting the number of cores can be problematic in CI/CD runners.</p>\n<p>Let's take a real scenario as example: for instance, in an <a href=\"https://cloudprice.net/aws/ec2/instances/db.m7i.2xlarge\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"><strong>m7i.2xlarge</strong> AWS EC2 instance with 32 available cores</a>, Node.js detects all cores even if the runner has only 3 cores allocated. This can lead to:</p>\n<ul>\n<li>Excessive memory usage</li>\n<li>Unexpected failures due to overloading</li>\n<li>Wasted time and resources troubleshooting the environment</li>\n</ul>\n<hr>\n<h2>The Solution: Dynamically Configuring via <code class=\"language-text\">poolOptions</code></h2>\n<p>The solution is to dynamically configure the number of threads used by Vitest based on the environment. Below is an example of how to adjust this configuration:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> defineConfig <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vitest'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> loadEnv <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vite'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> os <span class=\"token keyword\">from</span> <span class=\"token string\">'os'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token function\">defineConfig</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> mode <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> env <span class=\"token operator\">=</span> <span class=\"token function\">loadEnv</span><span class=\"token punctuation\">(</span>mode<span class=\"token punctuation\">,</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">cwd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Read the number of available CPUs</span>\n  <span class=\"token keyword\">const</span> cpus <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span><span class=\"token function\">cpus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/**\n   * In CI environments, Node.js detects all cores in the Kubernetes node,\n   * instead of just those allocated to the runner. This can cause memory\n   * issues. The configuration below adjusts the number of threads to 1/4\n   * of the detected cores in CI environments, optimizing performance.\n   */</span>\n  <span class=\"token keyword\">const</span> osThreads <span class=\"token operator\">=</span> env<span class=\"token punctuation\">.</span><span class=\"token constant\">CI</span> <span class=\"token operator\">?</span> cpus <span class=\"token operator\">/</span> <span class=\"token number\">4</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Locally, default behavior is used</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">CI</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token literal-property property\">pool</span><span class=\"token operator\">:</span> <span class=\"token string\">'threads'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token literal-property property\">poolOptions</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token literal-property property\">threads</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token literal-property property\">minThreads</span><span class=\"token operator\">:</span> osThreads<span class=\"token punctuation\">,</span>\n          <span class=\"token literal-property property\">maxThreads</span><span class=\"token operator\">:</span> osThreads<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Thatâ€™s all forÂ now</h3>\n<p>As you can see, this configuration dynamically adjusts thread usage based on the environment, optimizing performance while preventing excessive memory consumption. So that, you won't need to worry which environment you're running your test suite since the test runner will adapt its own tasks based on available resources for it!</p>\n<p>Thread configuration in Vitest might seem trivial, but it can lead to significant issues in CI/CD environments when misconfigured. By following the approach described in this article, you can optimize resource usage and ensure your tests run reliably and efficiently, regardless of the environment.</p>\n<h2>References</h2>\n<ul>\n<li><a href=\"https://vitest.dev/guide/migration.html#default-pool-is-forks\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vitest Documentation: Default Pool and Pool Options</a></li>\n<li><a href=\"https://github.com/vitest-dev/vitest/issues/1674\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Discussion on Vitest Issue #1674</a></li>\n</ul>\n<p>I hope you enjoyed this reading as much as I enjoyed writing it. Thank you so much for reading until the end and see you soon!</p>\n<hr />\n<h3>Cya ðŸ‘‹</h3>","frontmatter":{"date":"February 24, 2025","path":"/posts/optimize-thread-usage-in-vitest-for-ci-cd-environments","title":"Optimize Thread Usage in Vitest for CI/CD Environments","tags":["frontend","test","open-source","vite","vitest","tooling","performance","architecture"]},"timeToRead":2}},"pageContext":{}},"staticQueryHashes":["1559850390","63159454"]}